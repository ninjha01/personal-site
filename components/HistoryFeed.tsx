import { ChartPieIcon, CheckIcon } from "@heroicons/react/24/solid";
import { classNames } from "../utils";

export const HistoryFeed = () => {
  const eventTypes = {
    edited: { icon: PencilSquareIcon, bgColorClass: "bg-gray-400" },
    error: { icon: XMarkIcon, bgColorClass: "bg-red-500" },
    success: { icon: CheckIcon, bgColorClass: "bg-green-500" },
    plot: { icon: ChartPieIcon, bgColorClass: "bg-purple-500" },
    execute: { icon: CodeBracketIcon, bgColorClass: "bg-blue-500" },
  };

  const timeline = [
    {
      id: 0,
      type: eventTypes.edited,
      content: "Edited",
      target: "Cell #1",
      cell_id: 1,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
    {
      id: 1,
      type: eventTypes.execute,
      content: "Ran",
      target: "Cell #1",
      cell_id: 1,
      date: "Oct 4",
      datetime: "2022-06-01",
    },
    {
      id: 2,
      type: eventTypes.success,
      content: "Successfully ran",
      target: "Cell #1",
      cell_id: 1,
      date: "Oct 4",
      datetime: "2022-06-01",
    },
    {
      id: 3,
      type: eventTypes.execute,
      content: "Ran",
      target: "Cell $4",
      cell_id: 4,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
    {
      id: 4,
      type: eventTypes.plot,
      content: "Plot generated by",
      target: "Cell #4",
      cell_id: 4,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
    {
      id: 5,
      type: eventTypes.execute,
      content: "Ran",
      target: "Cell #7",
      cell_id: 5,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
    {
      id: 6,
      type: eventTypes.success,
      content: "Successfully ran",
      target: "Cell #7",
      cell_id: 5,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
    {
      id: 7,
      type: eventTypes.execute,
      content: "Ran",
      target: "Cell #6",
      cell_id: 3,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
    {
      id: 8,
      type: eventTypes.error,
      content: "Error thrown by",
      target: "Cell #6",
      cell_id: 6,
      date: "Jun 1",
      datetime: "2022-06-01",
    },
  ];
  return (
    <section
      aria-labelledby="timeline-title"
      className="lg:col-span-1 lg:col-start-3"
    >
      <div className="rounded-lg bg-zinc-700 px-4 py-5 shadow-xl sm:px-6">
        <h2 id="timeline-title" className="text-lg font-medium text-blue-100">
          Timeline
        </h2>

        {/* Activity Feed */}
        <div className="mt-6 flow-root">
          <ul className="-mb-8">
            {timeline.map((item, itemIdx) => (
              <li key={item.id}>
                <div className="relative pb-8">
                  {itemIdx !== timeline.length - 1 ? (
                    <span
                      className="absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200"
                      aria-hidden="true"
                    />
                  ) : null}
                  <div className="relative flex space-x-3">
                    <div>
                      <span
                        className={classNames(
                          item.type.bgColorClass,
                          "flex h-8 w-8 items-center justify-center rounded-full ring-8 ring-zinc-700",
                        )}
                      >
                        <item.type.icon
                          className="h-5 w-5 text-zinc-700"
                          aria-hidden="true"
                        />
                      </span>
                    </div>
                    <div className="flex min-w-0 flex-1 justify-between space-x-4 pt-1.5">
                      <div>
                        <p className="text-sm text-zinc-300">
                          {item.content}{" "}
                          <a
                            className="text-sm text-zinc-300"
                            href={`#cell-${item.cell_id}`}
                          >
                            {item.target}
                          </a>
                        </p>
                      </div>
                      <div className="whitespace-nowrap text-right text-sm text-zinc-300">
                        <time dateTime={item.datetime}>{item.date}</time>
                      </div>
                    </div>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div className="mt-6 flex flex-col justify-stretch">
          <button
            type="button"
            className="inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-zinc-100 shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Clear Timeline and Run All
          </button>
        </div>
      </div>
    </section>
  );
};

const CodeBracketIcon = ({ className }: { className: string }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={1.5}
      stroke="currentColor"
      className={classNames("h-6 w-6", className)}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"
      />
    </svg>
  );
};
const PencilSquareIcon = ({ className }: { className: string }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={1.5}
      stroke="currentColor"
      className={classNames("h-6 w-6", className)}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
      />
    </svg>
  );
};
const XMarkIcon = ({ className }: { className: string }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={1.5}
      stroke="currentColor"
      className={classNames("h-6 w-6", className)}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M6 18L18 6M6 6l12 12"
      />
    </svg>
  );
};
